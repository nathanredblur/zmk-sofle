#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    macros {
        emoji_test: emoji_test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp KP_N6 &kp KP_N4>;
            label = "EMOJI_TEST";
        };
    };

    combos {
        compatible = "zmk,combos";

        system_combo1 {
            bindings = <&sl 3>;
            key-positions = <18 31 44>;
        };

        system_combo2 {
            bindings = <&sl 3>;
            key-positions = <20 33 46>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&mt CAPSLOCK ESCAPE  &kp N1     &kp N2        &kp N3        &kp N4  &kp N5              &kp UP_ARROW     &kp N6             &kp N7     &kp N8     &kp N9            &kp N0             &kp MINUS
&kp GRAVE            &kp Q      &kp W         &kp E         &kp R   &kp T               &kp DOWN_ARROW   &kp Y              &kp U      &kp I      &kp O             &kp P              &mt GRAVE EQUAL
&kp TAB              &kp A      &kp S         &kp D         &kp F   &kp G               &kp LEFT_ARROW   &kp H              &kp J      &kp K      &kp L             &kp SEMI           &kp APOS
&kp LEFT_SHIFT       &kp Z      &kp X         &kp C         &kp V   &kp B               &kp RIGHT_ARROW  &kp N              &kp M      &kp COMMA  &kp DOT           &kp FSLH           &mt RIGHT_SHIFT BACKSLASH
&kp C_MUTE           &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &mo 1   &mt ESCAPE ENTER    &kp ENTER        &mt DEL BACKSPACE  &kp SPACE  &mo 2      &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "BASE";
        };

        Navigation {
            bindings = <
&trans      &kp F1          &kp F2            &kp F3          &kp F4                         &kp F5      &mmv MOVE_UP     &kp F6                  &kp F7              &kp F8               &kp F9                   &kp F10  &kp F11
&trans      &trans          &mkp LCLK         &mkp MCLK       &mkp RCLK                      &mkp MB4    &mmv MOVE_DOWN   &kp HOME                &kp PAGE_DOWN       &kp PG_UP            &kp END                  &trans   &kp F12
&trans      &kp F13         &kp LS(LG(N5))    &kp LS(LG(N3))  &mt LS(LC(LG(N4))) LS(LG(N4))  &mkp MB5    &mmv MOVE_LEFT   &kp LEFT                &kp DOWN_ARROW      &kp UP_ARROW         &kp RIGHT_ARROW          &trans   &kp INS
&trans      &sk LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT    &sk LEFT_GUI                   &trans      &mmv MOVE_RIGHT  &kp LA(LC(LEFT_ARROW))  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LA(LC(RIGHT_ARROW))  &trans   &kp DEL
&kp C_MUTE  &trans          &trans            &trans          &trans                         &trans      &mkp LCLK        &trans                  &trans              &trans               &trans                   &trans
            >;

            display-name = "NAV";
            sensor-bindings = <&scroll_encoder>;
        };

        Functions {
            bindings = <
&kp F23  &kp F13  &kp F14   &kp F15     &kp F16     &kp F17       &trans  &kp F18    &kp F19          &kp F20          &kp F21          &kp F22  &kt F24
&trans   &trans   &kp C_PP  &kp C_PREV  &kp C_NEXT  &kp C_MUTE    &trans  &trans     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans   &trans
&trans   &trans   &trans    &trans      &trans      &trans        &trans  &trans     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans   &trans
&trans   &trans   &trans    &trans      &trans      &trans        &trans  &kp KP_N0  &kp KP_N1        &kp KP_NUMBER_2  &kp KP_N3        &trans   &trans
&trans   &trans   &trans    &trans      &trans      &trans        &trans  &trans     &trans           &trans           &trans           &trans
            >;

            label = "Fn";
        };

        Sys {
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8   &kp F9   &kp F10    &trans
&out OUT_TOG     &trans           &trans           &trans        &trans        &bootloader     &mmv MOVE_DOWN   &trans  &trans  &kp F11  &kp F12  &kp UNDER  &kp PLUS
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &trans        &trans        &sys_reset      &mmv MOVE_LEFT   &trans  &trans  &trans   &trans   &kp LBRC   &kp RBRC
&rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans        &trans        &soft_off       &mmv MOVE_RIGHT  &trans  &trans  &trans   &trans   &trans     &trans
&trans           &trans           &trans           &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans   &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys_condition {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
